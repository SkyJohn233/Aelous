updating paste the plan to use the serverless framework brent ozar unlimited® no products in the cart i just updated pastetheplan and the change you ll notice first is that we re using the latest version of justin pealing s html-query-plan it adds missing index hints yellow bangs for warnings like implicit conversions and no join predicate and more check out this example plan pastetheplan june 2018 edition plus variable line widths for different amounts of data variable line widths one of the behind-the-scenes updates that you can t see is that we re now using the serverless framework if you haven t heard of the serverless framework that s okay it s still fairly new i ve been using the serverless framework over the past year or so on other projects and i figured it s about time to start using it with paste the plan the serverless framework is a huge help in deploying serverless applications to the cloud before serverless in order to deploy a paste the plan function to amazon web services i had to that doesn t sound like much work but i had to create and maintain those gulp functions that moved all of the files related to the function let s just say it s a bit messy but the biggest problem is that these steps take time and when you re testing these functions in the cloud you want to move fast this is where the serverless framework comes in the serverless framework packages and deploys serverless functions to the cloud one of the best things about the serverless framework is that it s not tied to any cloud provider it works with cloud providers aws azure and google cloud it even works with more obscure cloud providers like openwhisk and kubeless with the serverless framework deployment is just one command in order to put paste the plan in serverless deployment heaven i had to accomplish the following steps this was the easiest step since i already had it installed but if you re really interested in how to install the serverless framewok then with npm node package manager installed use the following command and that s it it s installed pretty easy the serverless.yml file is the magic of the serverless framework this file is where you tell the serverless framework about your function s and your cloud environment from here you can define what files are packaged the settings of your function and the role the function is associated with but my favorite thing that you can do in the serverless.yml file is create other cloud services you can create s3 buckets roles policies virtual private clouds api gateways queues and pretty much cloud service you can think of this is extremely powerful this means that you can configure entire serverless applications within one file and deploy them in one command this also means that if configured correctly you can deploy stage environments via a single command see the serverless framework documentation on how to configure the serverless.yml file for your cloud provider i had been using the dotenv npm package to use environment variables i had to do this because paste the plan was created before the lambda service had environment variables available the environment yaml file can be named what ever you like i prefer to use the functionname-env.yml format you can then specify the environment yaml filename in the serverless yaml file in the case of paste the plan it was pretty easy to reformat the dotenv environment file into the environment yaml format one of the things that i had to do was merge configuration files for dotenv we had two configuration files for each function one for production and one for development for the serverless framework the environment file needed to be one file so in the serverless environment file we defined two sections one for prod and one for dev and placed the appropriate settings under each each function in paste the plan had it s own package.json this file is created by npm and has a list of the packages that the function uses as it turns out there were a few unnecessary packages in package.json now this didn t affect the code but it does affect the performance the general rule with serverless is the larger your function is in size the slower it will take to start up since we have no control over when a function is started or stopped it s best to keep the size of the function as small as possible when going through the package.json files i noticed a few were referencing the aws-sdk we don t really need this package in the function because all lambda instances already have the aws-sdk installed i also removed references to dotenv since we wouldn t be using it anymore getting all of this setup really wasn t a big deal but getting it deployed was tougher because the functions already existed in lambda i had to delete the existing function while the deployment through the serverless framework worked access to the function through api gateway broke it turns out that the new function was missing a permission that the old function had once the permission was added everything worked the goal of this exercise was to ease the pain of deployment to the cloud the serverless framework has a bunch of features that i haven t discussed you can stream logs invoke functions and even run functions locally at some point i would like to put all of the resources in the serverless.yml file including the api gateway configuration virtual private network s3 buckets and security roles overall the serverless framework is pretty awesome and if you re using serverless architecture you should be using this framework brent says as a small business owner who wants to give back to the community i love serverless architecture because it keeps my hosting costs low here are the costs for pastetheplan over the last few months this is the kind of community initiative i can totally sustain cheep cheep dynamodb is the nosql database we re using and s3 is where we store the plan files the prices on that part don t even round up to a penny got ta love the cloud brent as a comparison and if you don t mind sharing of course how much was paste the plan costing before serverless i am impressed with this web site rattling i am a big fan the framework is immensely unreliable especially when you start building resources using dynamic names we re using dynamic resource names all over the place and haven t had an issue your email address will not be published required fields are marked notify me of followup comments via e-mail you can also subscribe without commenting post comment i make microsoft sql server go faster i love teaching travel and laughing i live in california with my wife erika i teach sql server training classes or if you haven t got time for the pain i m available for consulting too want to advertise here and reach my savvy readers © 2019 brent ozar unlimited® all rights reserved privacy policy terms and conditions