asp.net core signalr configuration microsoft docs asp.net core signalr supports two protocols for encoding messages json and messagepack each protocol has serialization configuration options json serialization can be configured on the server using the addjsonprotocol extension method addjsonprotocol can be added after addsignalr in startup.configureservices the addjsonprotocol method takes a delegate that receives an options object the payloadserializeroptions property on that object is a system.text.json jsonserializeroptions object that can be used to configure serialization of arguments and return values for more information see the system.text.json documentation as an example to configure the serializer to not change the casing of property names instead of the default camelcase names use the following code in startup.configureservices in the .net client the same addjsonprotocol extension method exists on hubconnectionbuilder the microsoft.extensions.dependencyinjection namespace must be imported to resolve the extension method note it 's not possible to configure json serialization in the javascript client at this time if you need features of newtonsoft.json that are n't supported in system.text.json see switch to newtonsoft.json messagepack serialization can be configured by providing a delegate to the addmessagepackprotocol call see messagepack in signalr for more details note it 's not possible to configure messagepack serialization in the javascript client at this time the following table describes options for configuring signalr hubs options can be configured for all hubs by providing an options delegate to the addsignalr call in startup.configureservices options for a single hub override the global options provided in addsignalr and can be configured using addhuboptions use httpconnectiondispatcheroptions to configure advanced settings related to transports and memory buffer management these options are configured by passing a delegate to maphub t in startup.configure the following table describes options for configuring asp.net core signalr 's advanced http options the long polling transport has additional options that can be configured using the longpolling property the websocket transport has additional options that can be configured using the websockets property client options can be configured on the hubconnectionbuilder type available in the .net and javascript clients it 's also available in the java client but the httphubconnectionbuilder subclass is what contains the builder configuration options as well as on the hubconnection itself logging is configured in the .net client using the configurelogging method logging providers and filters can be registered in the same way as they are on the server see the logging in asp.net core documentation for more information note in order to register logging providers you must install the necessary packages see the built-in logging providers section of the docs for a full list for example to enable console logging install the microsoft.extensions.logging.console nuget package call the addconsole extension method in the javascript client a similar configurelogging method exists provide a loglevel value indicating the minimum level of log messages to produce logs are written to the browser console window instead of a loglevel value you can also provide a string value representing a log level name this is useful when configuring signalr logging in environments where you do n't have access to the loglevel constants the following table lists the available log levels the value you provide to configurelogging sets the minimum log level that will be logged messages logged at this level or the levels listed after it in the table will be logged note to disable logging entirely specify signalr.loglevel.none in the configurelogging method for more information on logging see the signalr diagnostics documentation the signalr java client uses the slf4j library for logging it 's a high-level logging api that allows users of the library to chose their own specific logging implementation by bringing in a specific logging dependency the following code snippet shows how to use java.util.logging with the signalr java client if you do n't configure logging in your dependencies slf4j loads a default no-operation logger with the following warning message this can safely be ignored the transports used by signalr can be configured in the withurl call withurl in javascript a bitwise-or of the values of httptransporttype can be used to restrict the client to only use the specified transports all transports are enabled by default for example to disable the server-sent events transport but allow websockets and long polling connections in the javascript client transports are configured by setting the transport field on the options object provided to withurl in this version of the java client websockets is the only available transport in the java client the transport is selected with the withtransport method on the httphubconnectionbuilder the java client defaults to using the websockets transport note the signalr java client does n't support transport fallback yet to provide authentication data along with signalr requests use the accesstokenprovider option accesstokenfactory in javascript to specify a function that returns the desired access token in the .net client this access token is passed in as an http bearer authentication token using the authorization header with a type of bearer in the javascript client the access token is used as a bearer token except in a few cases where browser apis restrict the ability to apply headers specifically in server-sent events and websockets requests in these cases the access token is provided as a query string value access_token in the .net client the accesstokenprovider option can be specified using the options delegate in withurl in the javascript client the access token is configured by setting the accesstokenfactory field on the options object in withurl in the signalr java client you can configure a bearer token to use for authentication by providing an access token factory to the httphubconnectionbuilder use withaccesstokenfactory to provide an rxjava single string with a call to single.defer you can write logic to produce access tokens for your client additional options for configuring timeout and keep-alive behavior are available on the hubconnection object itself in the .net client timeout values are specified as timespan values additional options can be configured in the withurl withurl in javascript method on hubconnectionbuilder or on the various configuration apis on the httphubconnectionbuilder in the java client in the .net client these options can be modified by the options delegate provided to withurl in the javascript client these options can be provided in a javascript object provided to withurl in the java client these options can be configured with the methods on the httphubconnectionbuilder returned from the hubconnectionbuilder.create hub url asp.net core signalr supports two protocols for encoding messages json and messagepack each protocol has serialization configuration options json serialization can be configured on the server using the addjsonprotocol extension method which can be added after addsignalr in your startup.configureservices method the addjsonprotocol method takes a delegate that receives an options object the payloadserializersettings property on that object is a json.net jsonserializersettings object that can be used to configure serialization of arguments and return values for more information see the json.net documentation as an example to configure the serializer to use pascalcase property names instead of the default camelcase names use the following code in startup.configureservices in the .net client the same addjsonprotocol extension method exists on hubconnectionbuilder the microsoft.extensions.dependencyinjection namespace must be imported to resolve the extension method note it 's not possible to configure json serialization in the javascript client at this time messagepack serialization can be configured by providing a delegate to the addmessagepackprotocol call see messagepack in signalr for more details note it 's not possible to configure messagepack serialization in the javascript client at this time the following table describes options for configuring signalr hubs options can be configured for all hubs by providing an options delegate to the addsignalr call in startup.configureservices options for a single hub override the global options provided in addsignalr and can be configured using addhuboptions use httpconnectiondispatcheroptions to configure advanced settings related to transports and memory buffer management these options are configured by passing a delegate to maphub t in startup.configure the following table describes options for configuring asp.net core signalr 's advanced http options the long polling transport has additional options that can be configured using the longpolling property the websocket transport has additional options that can be configured using the websockets property client options can be configured on the hubconnectionbuilder type available in the .net and javascript clients it 's also available in the java client but the httphubconnectionbuilder subclass is what contains the builder configuration options as well as on the hubconnection itself logging is configured in the .net client using the configurelogging method logging providers and filters can be registered in the same way as they are on the server see the logging in asp.net core documentation for more information note in order to register logging providers you must install the necessary packages see the built-in logging providers section of the docs for a full list for example to enable console logging install the microsoft.extensions.logging.console nuget package call the addconsole extension method in the javascript client a similar configurelogging method exists provide a loglevel value indicating the minimum level of log messages to produce logs are written to the browser console window note to disable logging entirely specify signalr.loglevel.none in the configurelogging method for more information on logging see the signalr diagnostics documentation the signalr java client uses the slf4j library for logging it 's a high-level logging api that allows users of the library to chose their own specific logging implementation by bringing in a specific logging dependency the following code snippet shows how to use java.util.logging with the signalr java client if you do n't configure logging in your dependencies slf4j loads a default no-operation logger with the following warning message this can safely be ignored the transports used by signalr can be configured in the withurl call withurl in javascript a bitwise-or of the values of httptransporttype can be used to restrict the client to only use the specified transports all transports are enabled by default for example to disable the server-sent events transport but allow websockets and long polling connections in the javascript client transports are configured by setting the transport field on the options object provided to withurl in this version of the java client websockets is the only available transport to provide authentication data along with signalr requests use the accesstokenprovider option accesstokenfactory in javascript to specify a function that returns the desired access token in the .net client this access token is passed in as an http bearer authentication token using the authorization header with a type of bearer in the javascript client the access token is used as a bearer token except in a few cases where browser apis restrict the ability to apply headers specifically in server-sent events and websockets requests in these cases the access token is provided as a query string value access_token in the .net client the accesstokenprovider option can be specified using the options delegate in withurl in the javascript client the access token is configured by setting the accesstokenfactory field on the options object in withurl in the signalr java client you can configure a bearer token to use for authentication by providing an access token factory to the httphubconnectionbuilder use withaccesstokenfactory to provide an rxjava single string with a call to single.defer you can write logic to produce access tokens for your client additional options for configuring timeout and keep-alive behavior are available on the hubconnection object itself in the .net client timeout values are specified as timespan values additional options can be configured in the withurl withurl in javascript method on hubconnectionbuilder or on the various configuration apis on the httphubconnectionbuilder in the java client in the .net client these options can be modified by the options delegate provided to withurl in the javascript client these options can be provided in a javascript object provided to withurl in the java client these options can be configured with the methods on the httphubconnectionbuilder returned from the hubconnectionbuilder.create hub url asp.net core signalr supports two protocols for encoding messages json and messagepack each protocol has serialization configuration options json serialization can be configured on the server using the addjsonprotocol extension method which can be added after addsignalr in your startup.configureservices method the addjsonprotocol method takes a delegate that receives an options object the payloadserializersettings property on that object is a json.net jsonserializersettings object that can be used to configure serialization of arguments and return values for more information see the json.net documentation as an example to configure the serializer to use pascalcase property names instead of the default camelcase names use the following code in startup.configureservices in the .net client the same addjsonprotocol extension method exists on hubconnectionbuilder the microsoft.extensions.dependencyinjection namespace must be imported to resolve the extension method note it 's not possible to configure json serialization in the javascript client at this time messagepack serialization can be configured by providing a delegate to the addmessagepackprotocol call see messagepack in signalr for more details note it 's not possible to configure messagepack serialization in the javascript client at this time the following table describes options for configuring signalr hubs options can be configured for all hubs by providing an options delegate to the addsignalr call in startup.configureservices options for a single hub override the global options provided in addsignalr and can be configured using addhuboptions use httpconnectiondispatcheroptions to configure advanced settings related to transports and memory buffer management these options are configured by passing a delegate to maphub t in startup.configure the following table describes options for configuring asp.net core signalr 's advanced http options the long polling transport has additional options that can be configured using the longpolling property the websocket transport has additional options that can be configured using the websockets property client options can be configured on the hubconnectionbuilder type available in the .net and javascript clients it 's also available in the java client but the httphubconnectionbuilder subclass is what contains the builder configuration options as well as on the hubconnection itself logging is configured in the .net client using the configurelogging method logging providers and filters can be registered in the same way as they are on the server see the logging in asp.net core documentation for more information note in order to register logging providers you must install the necessary packages see the built-in logging providers section of the docs for a full list for example to enable console logging install the microsoft.extensions.logging.console nuget package call the addconsole extension method in the javascript client a similar configurelogging method exists provide a loglevel value indicating the minimum level of log messages to produce logs are written to the browser console window note to disable logging entirely specify signalr.loglevel.none in the configurelogging method for more information on logging see the signalr diagnostics documentation the signalr java client uses the slf4j library for logging it 's a high-level logging api that allows users of the library to chose their own specific logging implementation by bringing in a specific logging dependency the following code snippet shows how to use java.util.logging with the signalr java client if you do n't configure logging in your dependencies slf4j loads a default no-operation logger with the following warning message this can safely be ignored the transports used by signalr can be configured in the withurl call withurl in javascript a bitwise-or of the values of httptransporttype can be used to restrict the client to only use the specified transports all transports are enabled by default for example to disable the server-sent events transport but allow websockets and long polling connections in the javascript client transports are configured by setting the transport field on the options object provided to withurl to provide authentication data along with signalr requests use the accesstokenprovider option accesstokenfactory in javascript to specify a function that returns the desired access token in the .net client this access token is passed in as an http bearer authentication token using the authorization header with a type of bearer in the javascript client the access token is used as a bearer token except in a few cases where browser apis restrict the ability to apply headers specifically in server-sent events and websockets requests in these cases the access token is provided as a query string value access_token in the .net client the accesstokenprovider option can be specified using the options delegate in withurl in the javascript client the access token is configured by setting the accesstokenfactory field on the options object in withurl in the signalr java client you can configure a bearer token to use for authentication by providing an access token factory to the httphubconnectionbuilder use withaccesstokenfactory to provide an rxjava single string with a call to single.defer you can write logic to produce access tokens for your client additional options for configuring timeout and keep-alive behavior are available on the hubconnection object itself in the .net client timeout values are specified as timespan values additional options can be configured in the withurl withurl in javascript method on hubconnectionbuilder or on the various configuration apis on the httphubconnectionbuilder in the java client in the .net client these options can be modified by the options delegate provided to withurl in the javascript client these options can be provided in a javascript object provided to withurl in the java client these options can be configured with the methods on the httphubconnectionbuilder returned from the hubconnectionbuilder.create hub url thank you send feedback about loading feedback thank you