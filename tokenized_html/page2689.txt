json.stringify javascript mdn the json.stringify method converts a javascript object or value to a json string optionally replacing values if a replacer function is specified or optionally including only the specified properties if a replacer array is specified the source for this interactive example is stored in a github repository if you 'd like to contribute to the interactive examples project please clone https //github.com/mdn/interactive-examples and send us a pull request if this is a number it indicates the number of space characters to use as white space this number is capped at 10 if it is greater the value is just 10 values less than 1 indicate that no space should be used if this is a string the string or the first 10 characters of the string if it 's longer than that is used as white space if this parameter is not provided or is null no white space is used a json string representing the given value json.stringify converts a value to json notation representing it the replacer parameter can be either a function or an array as a function it takes two parameters the key and the value being stringified the object in which the key was found is provided as the replacer 's this parameter initially the replacer function is called with an empty string as key representing the object being stringified it is then called for each property on the object or array being stringified it should return the value that should be added to the json string as follows note you can not use the replacer function to remove values from an array if you return undefined or a function then null is used instead note if you wish the replacer to distinguish an initial object from a key with an empty string property since both would give the empty string as key and potentially an object as value you will have to keep track of the iteration count if it is beyond the first iteration it is a genuine empty string key if replacer is an array the array 's values indicate the names of the properties in the object that should be included in the resulting json string the space argument may be used to control spacing in the final string using a tab character mimics standard pretty-print appearance if an object being stringified has a property named tojson whose value is a function then the tojson method customizes json stringification behavior instead of the object being serialized the value returned by the tojson method when called will be serialized json.stringify calls tojson with one parameter for example note that since the json format does n't support object references although an ietf draft exists a typeerror will be thrown if one attempts to encode an object with circular references to serialize circular references you can use a library that supports them e.g cycle.js by douglas crockford or implement a solution by yourself which will require finding and replacing or removing the cyclic references by serializable values historically json was not a completely strict subset of javascript the literal code points u+2028 line separator and u+2029 paragraph separator could appear literally in string literals and property names in json text but they could not appear literally in similar context in javascript text only using unicode escapes as \u2028 and \u2029 this recently changed now both code points may appear literally in strings in json and javascript both therefore if compatibility with older javascript engines is required it is perilous to directly substitute the string returned by json.stringify into a javascript string to be passed to eval or new function or as part of a jsonp url and the following utility can be used note properties of non-array objects are not guaranteed to be stringified in any particular order do not rely on ordering of properties within the same object within the stringification in a case where you want to store an object created by your user and allowing it to be restored even after the browser has been closed the following example is a model for the applicability of json.stringify engines implementing the well-formed json.stringify specification will stringify lone surrogates any code point from u+d800 to u+dfff using unicode escape sequences rather than literally before this change json.stringify would output lone surrogates if the input contained any lone surrogates such strings could not be encoded in valid utf-8 or utf-16 but with this change json.stringify represents lone surrogates using json escape sequences that can be encoded in valid utf-8 or utf-16 this change should be backwards-compatible as long as you pass the result of json.stringify to apis such as json.parse that will accept any valid json text because they will treat unicode escapes of lone surrogates as identical to the lone surrogates themselves only if you are directly interpreting the result of json.stringify do you need to carefully handle json.stringify 's two possible encodings of these code points our team will review your report once we verify the information you have supplied we will update this browser compatability table accordingly you can join the github repository to see updates and commits for this table data https //github.com/mdn/browser-compat-data our goal is to provide accurate real values for all our compatibility data tables notifying mdn of inaccurate data or supplying new data pushes us further towards our goal of providing 100 real values to the developer community thank you for helping get the latest and greatest from mdn delivered straight to your inbox the newsletter is offered in english only at the moment Â© 2005- 2019 mozilla and individual contributors content is available under these licenses the json.stringify method converts a javascript object or value to a json string optionally replacing values if a replacer function is specified or optionally including only the specified properties if a replacer array is specified the source for this interactive example is stored in a github repository if you 'd like to contribute to the interactive examples project please clone https //github.com/mdn/interactive-examples and send us a pull request if this is a number it indicates the number of space characters to use as white space this number is capped at 10 if it is greater the value is just 10 values less than 1 indicate that no space should be used if this is a string the string or the first 10 characters of the string if it 's longer than that is used as white space if this parameter is not provided or is null no white space is used a json string representing the given value json.stringify converts a value to json notation representing it the replacer parameter can be either a function or an array as a function it takes two parameters the key and the value being stringified the object in which the key was found is provided as the replacer 's this parameter initially the replacer function is called with an empty string as key representing the object being stringified it is then called for each property on the object or array being stringified it should return the value that should be added to the json\u00a0string as follows note you can not use the replacer function to remove values from an array if you return undefined or a function then null is used instead note if you wish the replacer to distinguish an initial object from a key with an empty string property since both would give the empty string as key and potentially an object as value you will have to keep track of the iteration count if it is beyond the first iteration it is a genuine empty string key if replacer is an array the array 's values indicate the names of the properties in the object that should be included in the resulting json\u00a0string the space argument may be used to control spacing in the final string using a tab character mimics standard pretty-print appearance if an object being stringified has a property named tojson whose value is a function then the tojson method customizes json stringification behavior instead of the object being serialized the value returned by the tojson method when called will be serialized json.stringify calls tojson with one parameter for example note that since the json format does n't support object references although an ietf draft exists a typeerror will be thrown if one attempts to encode an object with circular references to serialize circular references you can use a library that supports them e.g cycle.js by douglas crockford or implement a solution by yourself which will require finding and replacing or removing the cyclic references by serializable values historically json was not a completely strict subset of javascript the literal code points u+2028 line separator and u+2029 paragraph separator could appear literally in string literals and property names in json text but they could not appear literally in similar context in javascript text only using unicode escapes as \\\\u2028 and \\\\u2029 .\u00a0 this recently changed now both code points may appear literally in strings in json and javascript both therefore if compatibility with older javascript engines is required it is perilous to directly substitute the string returned by json.stringify into a javascript string to be passed to eval or new function or as part of a jsonp url and the following utility can be used note properties of non-array objects are not guaranteed to be stringified in any particular order do not rely on ordering of properties within the same object within the stringification in a case where you want to store an object created by your user and allowing it to be restored even after the browser has been closed the following example is a model for the applicability of json.stringify engines implementing the well-formed json.stringify specification will stringify lone surrogates any code point from u+d800 to u+dfff using unicode escape sequences rather than literally before this change json.stringify would output lone surrogates if the input contained any lone surrogates such strings could not be encoded in valid utf-8 or utf-16 but with this change json.stringify represents lone surrogates using json escape sequences that can be encoded in valid utf-8 or utf-16 this change should be backwards-compatible as long as you pass the result of json.stringify to apis such as json.parse that will accept any valid json text because they will treat unicode escapes of lone surrogates as identical to the lone surrogates themselves only if you are directly interpreting the result of json.stringify do you need to carefully handle json.stringify 's two possible encodings of these code points the json.stringify method converts a javascript object or value to a json string optionally replacing values if a replacer function is specified or optionally including only the specified properties if a replacer array is specified the source for this interactive example is stored in a github repository if you 'd like to contribute to the interactive examples project please clone https //github.com/mdn/interactive-examples and send us a pull request if this is a number it indicates the number of space characters to use as white space this number is capped at 10 if it is greater the value is just 10 values less than 1 indicate that no space should be used if this is a string the string or the first 10 characters of the string if it 's longer than that is used as white space if this parameter is not provided or is jsxref \\\ null\\\ no white space is used a json string representing the given value json.stringify converts a value to json notation representing it the replacer parameter can be either a function or an array as a function it takes two parameters the key and the value being stringified the object in which the key was found is provided as the replacer 's this parameter initially the replacer function is called with an empty string as key representing the object being stringified it is then called for each property on the object or array being stringified it should return the value that should be added to the json\u00a0string as follows note you can not use the replacer function to remove values from an array if you return undefined or a function then null is used instead note if you wish the replacer to distinguish an initial object from a key with an empty string property since both would give the empty string as key and potentially an object as value you will have to keep track of the iteration count if it is beyond the first iteration it is a genuine empty string key if replacer is an array the array 's values indicate the names of the properties in the object that should be included in the resulting json\u00a0string the space argument may be used to control spacing in the final string using a tab character mimics standard pretty-print appearance if an object being stringified has a property named tojson whose value is a function then the tojson method customizes json stringification behavior instead of the object being serialized the value returned by the tojson method when called will be serialized json.stringify calls tojson with one parameter for example note that since the json format does n't support object references although an ietf draft exists a jsxref \\\ typeerror\\\ will be thrown if one attempts to encode an object with circular references to serialize circular references you can use a library that supports them e.g cycle.js by douglas crockford or implement a solution by yourself which will require finding and replacing or removing the cyclic references by serializable values historically json was not a completely strict subset of javascript the literal code points u+2028 line separator and u+2029 paragraph separator could appear literally in string literals and property names in json text but they could not appear literally in similar context in javascript text only using unicode escapes as \\\\u2028 and \\\\u2029 .\u00a0 this recently changed now both code points may appear literally in strings in json and javascript both therefore if compatibility with older javascript engines is required it is perilous to directly substitute the string returned by json.stringify into a javascript string to be passed to eval or new function or as part of a jsonp url and the following utility can be used note properties of non-array objects are not guaranteed to be stringified in any particular order do not rely on ordering of properties within the same object within the stringification in a case where you want to store an object created by your user and allowing it to be restored even after the browser has been closed the following example is a model for the applicability of json.stringify engines implementing the well-formed json.stringify specification will stringify lone surrogates any code point from u+d800 to u+dfff using unicode escape sequences rather than literally before this change json.stringify would output lone surrogates if the input contained any lone surrogates such strings could not be encoded in valid utf-8 or utf-16 but with this change json.stringify represents lone surrogates using json escape sequences that can be encoded in valid utf-8 or utf-16 this change should be backwards-compatible as long as you pass the result of json.stringify to apis such as json.parse that will accept any valid json text because they will treat unicode escapes of lone surrogates as identical to the lone surrogates themselves only if you are directly interpreting the result of json.stringify do you need to carefully handle json.stringify 's two possible encodings of these code points compat \\\ javascript.builtins.json.stringify\\\