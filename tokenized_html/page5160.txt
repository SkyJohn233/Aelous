suggestion list of all generated chunks issue 256 spongepowered/spongeapi github github is home to over 40 million developers working together to host and review code manage projects and build software together have a question about this project sign up for a free github account to open an issue and contact its maintainers and the community by clicking sign up for github you agree to our terms of service and privacy statement we ll occasionally send you account related emails already on github sign in to your account a plugin that i developed for bukkit requires me to create large structures across many chunks these chunks have to have already been generated whether they are loaded or not and devoid of vanilla ores i 've also gotten requests that i make this plugin compatible with already generated worlds to make doing this easier i request that the following methods be added to the world class edit clarified what i meant by 'generated gratimax pointed out that during chunk generation structures are generated first then the 'layer terrain landforms and then 'decorators reformatted this seems like a relatively reasonable feature however getting a list of all generated chunks might be expensive might make more sense too expensive as in the overhead required to access that info or the amnt it would slow things down by invoking this method the way i envision getpopulatedchunks /getworldchunklist being called is at most once during the server 's lifetime is n't there a difference between generated and populated at least there was in bukkit and minecraft good point i think i recall generated meaning that the chunk had its terrain 'carved out and populated being that the chunk has been populated already by a set of block populators in any case i 'd like to be able to identify chunks that are done being messed with and get a list of chunks that part of my plugin has to go through and edit also new in 1.8 is the code that retrogen 's the new stone types as well as the underwater structures ryantheleach good point last time i looked in the minecraft source there were two steps to generating terrain minecraft actually does step number 1 first because big structures like underwater temples underground mineshafts and strongholds take up more than one chunk and their size can not be determined without generating them they 're essentially simple cellular automata so minecraft has an upper bound on the size of these structures and when generating a chunk it checks if any big structures are within that radius those nearby structures are generated first and step 2 comes per-chunk as such the final step of generating terrain is generation not population chunks stop being messed with after that gratimax most populators absolutely are n't before terrain generation populators are mostly things like trees caves grass/flowers ores and etc i do n't know about huge structures but most populators come after terrain generation on mon dec 01 2014 at 7:49:18 pm gratimax notifications github.com wrote ryantheleach https //github.com/ryantheleach good point last time i looked in the minecraft source there were two steps to generating terrain minecraft actually does step number 1 first because big structures like underwater temples underground mineshafts and strongholds take up more than one chunk and their size can not be determined without generating them they 're essentially simple cellular automata so minecraft has an upper bound on the size of these structures and when generating a chunk it checks if any big structures are within that radius those nearby structures are generated first and step 2 comes per-chunk as such the final step of generating terrain is generation not population chunks stop being messed with after that — reply to this email directly or view it on github 256 comment nightpool i guess i 'm using the wrong or old nomenclature i understand that smaller things as you mentioned trees caves grass and flowers are populated after the terrain but i was talking about big structures its possible i 'm off base on naming too most of my experience with world gen is from the beta era on mon dec 1 2014 at 8:00 pm gratimax notifications github.com wrote nightpool https //github.com/nightpool i guess i 'm using the wrong or old nomenclature i understand that smaller things as you mentioned trees caves grass and flowers are populated after the terrain but i was talking about big structures — reply to this email directly or view it on github 256 comment nightpool i took a look through the source to confirm the names the things you 're talking about are called 'decorators and 'features not populators the things i 'm talking about are called 'structures the order goes structure layer actual terrain feature as expected that actually clears up a lot gratimax thanks i 'll edit my original suggestion to clarify what i meant speaking from my bukkit and dynmap experience i do n't think you want to consider getting a list of all chunks generated or populated as a single synchronous world call on large servers it 'll kill you as the data is spread across potentially thousands of anvil .mca files each of which needs to be opened in order to answer the 'is it generated question and 'populated requires reading data stored in the compressed per chunk nbt data which does n't support being efficiently read for just a single field so you 're gon na wind up uncompressing and unmarshalling the whole chunk data to just get the field see http //minecraft.gamepedia.com/chunk_format for details isgenerated int int can be done reasonably efficiently if you have it check for the existence of the .mca file and then just load the offset map at the beginning of the file to see if the corresponding offset is nonzero even so doing just that en-mass for a whole world will still be a lag-fest the main world on the server i admin westeroscraft has 21000 .mca files each of which would need to be opened and have the first 4k of data read in order to provide the identities of the chunks of which there are going to be about 10,000,000 returned numbers to back up my prediction needless to say i 'm in favor of no methods that when called freeze the server registering hooks that are called at various times during chunk generation and population seems smarter like chunkgeneratedevent chunkpopulatedevent and chunkdecoratedevent i see how bout keeping a separate hashmap of all chunk coordinates that have been decorated from the time of server creation i suppose i could just make one in my own plugin that keeps track of all the decorated event calls if they are implemented having a api based isgenerated int int function that allows the querying of specific chunks for their existence plus those three events mentioned above should give me the functionality i 've been looking for although it looks like converting entire words will not be an option if we do want to accomplish something like this though it 'd be possible to do it with some sort of asynchronous iterator type of response the i/o for the mca fils does n't need to be done on the server thread and the results could be delivered via a multistage callback from 'off-thread e.g the caller provides an object implementing a callback interface which is then called with partial results repeatedly as the request is processed it could be done pretty well for the 'isgenerated result with results returned once for each mca file processed for example doing 'ispopulated/decorated that way is n't necessarily worth it as the work is almost all per-chunk so doing all the chunks in one region file at once is n't necessarily going to help much for efficiency so just having a 'ispopulated x y method that could be used once folks already have the bulk isgenerated results is probably just as good since ultimately reading the populated nbt field for every chunk is going to result in the whole mca file being read the upside of the bulk isgenerated thing is that presently in bukkit and elsewhere there is n't a good way to find out all the chunks that exist in a world polling all the potential xz combinations is n't realistic and actually causes empty .mca files to be generated for dynmap i actually check the presence of the .mca files and parse the names to know where existing chunks might be so that i avoid creating empty ones by asking so basically a chunk iterator that can accept a filter that does n't generate nonexisting chunks this would seem to make it clear that getting all the generated chunks can and will iterate over all chunks provides a means of filtering arbitrary chunks and lets people using java8 use streaming api while allowing the implementation make optimizations one thing i do n't understand with filters is it possible say to filter all chunks by their x and z co-ordinates and detect that the chunk does n't need to be loaded for that particular filter to resolve or would information that is available like that be a different object then chunk ryantheleach there are some ways to acomplish this kind of filter first of all world.getgeneratedchunks minx minz maxx maxx using int values as parameters to allow limiting the chunk before even thinking of them code wise otherwise you need a mayaccept x z boolean with the downside that you have to calculate that possible chunk position somehow but you may safe io if you do n't want it loaded after that you can use the actual filter method accept x z chunk and check whether you want that chunk in your list but if you add such a method please consider adding either a world.getregioncontainer file method or/and a world.getregions list regionloc method because this in combination with world.getgeneratedchunks regionloc iterable chunkloc will drastically reduce the performance impact because bad implementations are less likely in addition to that this may help plugins like dynmap because they wo n't have to search for all existing region files themselves sumary executing the filter after the io has been made has no befenfits st-ddt i like the idea of being explicit on the support for the regionfile it definitely allows for a more practical take on both enumerating what chunks might exist in a more fine-grained fashion as well as being more caching-friendly it would n't be unreasonable to keep and internally maintain a cache of the regionloc values for a given world avoiding i/o to find the existing files beyond the first check since even for large worlds these number in the thousands to tens-of-thousands versus the millions to tens-of-millions for the chunks my point with the callback style iteration was to exploit the fact that the actual i/o of chunk data is already handled by dedicated threads that are not the caller 's thread so the choice to read data from regionfiles is going to either involve the caller blocking and waiting for the i/o to be handled by the i/o thread or we could make it an asynchronous request where the result are delivered either by a callback from the i/o thread or queued back to the server or something else that avoids the badness of having a blocking call on the server thread anything involving synchronous disk i/o during calls from the server thread is generally bad for scaling st-ddt and mikeprimm i think putting anything in the api which makes assumptions about the underlying format is a really bad idea especially for other implementors and potential future storage format changes it should also definitely not be assumed that the underlying storage format is based around files it should be perfectly feasible to store chunks in an rdbms for example for that reason any proposed getregioncontainer should return an interface which can represent any kind of storage container for a region not even necessarily a 1:1 mapping of regions to containers rather than returning java.io.file st-ddt your proposed methods are very inconsistent you use regionloc in some places vectors in others and integers elsewhere why not use the same argument/return types and be consistent especially with reference to the getexistingchunks overload which takes integers that would seems completely pointless mumfrey chunks by their nature are already such an assumption there is nothing magic about 16 x 16 division of the block domain it 's an artifact of implementation that is at least as likely to change as the division of the world into 32 x 32 chunk regions known as region files much less the fact that worlds have always had a folder associated with them in bukkit and all other modding implementations i 've seen historically chunks have been messed with more by mojang than the region files the world heigh t change and introduction of 16 x 16 x 16 chunk sections being the most notable only change to region files was renaming mcr to mca to indicate the migration to the newer chunk format in any case a change in storage format could emulate the notion of 16 x 16 block chunks and 32 x 32 chunk regions with no significant effort i agree that chunks are just as crappy an assumption but we 're kind of stuck with it i was primarily disputing the use of java.io.file when getting chunk container as while chunks or more properly chunkcolumns are a fact of life for minecraft because of the protocol and lots of other assumptions made throughout the engine it should be up to the underlying implementation to decide on the actual storage on disk and if glowstone decides it wants to pack 4 chunkcolumns to a file or store them in an rdbms then it should be free to do so plus it helps in the future given that we know the level format is going to change if we provide extra abstraction now it does n't cost us anything but has the potential to be helpful in the future so i do n't think it 's an unreasonable suggestion so what about returning an iterator/calling a callback of blockvolumes representing an atomic region of generated land this would in minecraft default to being 16x16x256 but would allow for change in the future at worst it could end up being block by block un-recommended or as big as the entire world i would love to have some sort of off-thread interface to unloaded chunks in sponge we probably do n't need to expose actual region files just a smart world.getunloadedchunks iterator kinda deal and then maybe some sort of filtering that would keep us from opening all of the files if we only need some of them on fri dec 5 2014 at 11:44 am ryan leach notifications github.com wrote so what about returning an iterator of blockvolumes representing an atomic region of generated land this would in minecraft default to being 16x16x256 but would allow for change in the future at worst it could end up being block by block un-recommended or as big as the entire world — reply to this email directly or view it on github 256 comment the int vs chunkloc stuff was indeed not consistent i 'll fix that when thinking of regions i thought of the following chunks are already in the api so they propably stay in there regions are chunk containers they are required for persisting data on the hard drive so there will always be some kind of region if you think that region is not the right term i can call it chunkcontainer if you store your entire world in a database you will have multiple region tables or at least some kind of column for indexes if the entire database table is a region that there is just one region at all if there is no persistence at all then you will have one region of infinite size but as you mentioned no file so i will use storagecontainer as a way to support all those different storage types i have no intentions in stating anywhere that a chunk or region have a specified size b block c chunk r region ε element i hope that this assumptions are acceptable here is my updated list of methods i did not add the async to the method names yet to avoid confusion at this stage sumary does this list fits better to your expectations or did i miss anything st-ddt tbh i do n't see why we need a region api i could just as easily store all my chunks in a relational database and there would be no concept of a region because there would be no grouping of chunks above just world instead we should just transparently allow for some interface over unloaded chunks chunkdata for example the region api should prevent that the authors have to find a hacky way to get all region files to make asumptions where chunks may be checking and storing newly created/loaded chunks will only work for plugins that are installed before the world is created otherwise you will have black spots on your chunk list for chunks that have not been loaded yet i have some mca s that have not been changed for months and i do n't want them to not show up in any plugin for any reason st-ddt i meant an api that would allow you to access some details of unloaded chunks off-thread for example from region files but not necessarily without pulling the whole chunk in to memory on fri dec 05 2014 at 6:15:08 pm st-ddt notifications github.com wrote the region api should prevent that the authors have to find a hacky way to get all region files to make asumptions where chunks may be checking and storing newly created/loaded chunks will only work for plugins that are installed before the world is created otherwise you will have black spots on your chunk list for chunks that have not been loaded yet i have some mca s that have not been changed for months and i do n't want them to not show up in any plugin for any reason — reply to this email directly or view it on github 256 comment nightpool you are right it should be somehow bound to the internal threads but if the data are extracted from the chunk/region file they should be accessible outside of the chunk/region thread scope readonly shall i mark any of those methods for more discussion or add a comment/notice st-ddt i like your updated method list i think the only thing is missing is some chunkevents such as chunkgenerateevent chunkpopulateevent chunkdecorateevent so here is my pr 283 which should contain all features mentioned here if i missed a certain feature please tell me a couple of issues i see with some things st-ddt looks good to me although i was curious as to what world.getexistingchunks would return an iterator list of chunk points el-minadero there are actually to ways the first returns actual chunks the second one gives you information whether there are chunks or not and it also can be used to get the real chunk st-ddt ok looks great to me thanks for all the work you 'll get an honorable mention when i release my plugin d you should better mention the team because they do most of the api stuff and the pr its not merged yet any other features for worlds etc you would like to see spongepowered/developers i think it would be better to return the chunkdata there may be reasons for wanting the list of existing chunks without wanting the chunks themselves thats why there are two methods each one for the chunks and one only for the data spongepowered/developers i believe this issue has been discussed well enough and a proper addition to the api was made with 272 specifically with chunkiterator correct me if i 'm wrong this pr has morphed significantly from it 's initial conception also gabizou chunkiterator does n't include support for the data only asynchronous iterator similarly it 's not asynchronous and there is n't an asynchronous read-only option similarly it 's not asynchronous and there is n't an asynchronous read-only option why is it not asynchronous what prevents the data from being read asynchronously constructing a dataview of chunk data has no relation to the actual server thread let alone needing to really utilize the main thread granted calling the iterator while on the main thread will hold up the main thread to read the data it still is perfectly viable to read the data from an asynchronous thread the dataview is specifically not an instance of the data that is live for this very purpose unless i 'm misunderstanding this completely the chunkiterator can be used asynchronously for all intents and purposes related to reading data writing data is an entirely different story however the api does n't specify an asynchronous relationship which is different than being possibly asynchronous the specifications are similar to asynchronous conditions but not guaranteed asynchronous modwizcode i 've changed up the nature of chunkiterator in 420 it aims to achieve much of what this issue has requested now that 420 has merged with added asynchronicity i 'll close this