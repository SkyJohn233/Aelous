JSON.stringify() - JavaScript | MDN The  JSON.stringify()  method converts a JavaScript object or value to a JSON string, optionally replacing values if a replacer function is specified or optionally including only the specified properties if a replacer array is specified. The source for this interactive example is stored in a GitHub repository. If you'd like to contribute to the interactive examples project, please clone  https://github.com/mdn/interactive-examples  and send us a pull request. If this is a  Number , it indicates the number of space characters to use as white space; this number is capped at 10 (if it is greater, the value is just  10 ). Values less than 1 indicate that no space should be used. If this is a  String , the string (or the first 10 characters of the string, if it's longer than that) is used as white space. If this parameter is not provided (or is  null ), no white space is used. A JSON string representing the given value. JSON.stringify()  converts a value to JSON notation representing it: The  replacer  parameter can be either a function or an array. As a function , it takes two parameters: the  key  and the  value  being stringified. The object in which the key was found is provided as the replacer's  this  parameter. Initially, the  replacer  function is called with an empty string as key representing the object being stringified. It is then called for each property on the object or array being stringified. It should return the value that should be added to the JSON string, as follows: Note:  You cannot use the  replacer  function to remove values from an array. If you return  undefined  or a function then  null  is used instead. Note:  If you wish the replacer to distinguish an initial object from a key with an empty string property (since both would give the empty string as key and potentially an object as value), you will have to keep track of the iteration count (if it is beyond the first iteration, it is a genuine empty string key). If  replacer  is an array, the array's values indicate the names of the properties in the object that should be included in the resulting JSON string. The  space  argument may be used to control spacing in the final string. Using a tab character mimics standard pretty-print appearance: If an object being stringified has a property named  toJSON  whose value is a function, then the  toJSON()  method customizes JSON stringification behavior: instead of the object being serialized, the value returned by the  toJSON()  method when called will be serialized.  JSON.stringify()  calls  toJSON  with one parameter: For example: Note that since the  JSON format  doesn't support object references (although an  IETF draft exists ), a  TypeError  will be thrown if one attempts to encode an object with circular references. To serialize circular references you can use a library that supports them (e.g.  cycle.js  by Douglas Crockford) or implement a solution by yourself, which will require finding and replacing (or removing) the cyclic references by serializable values. Historically, JSON was  not a completely strict subset of JavaScript . The literal code points U+2028 LINE SEPARATOR and U+2029 PARAGRAPH SEPARATOR could appear literally in string literals and property names in JSON text. But they could not appear literally in similar context in JavaScript text -- only using Unicode escapes as  \u2028  and  \u2029 .  This recently changed: now both code points may appear literally in strings in JSON and JavaScript both. Therefore, if compatibility with older JavaScript engines is required, it is perilous to directly substitute the string returned by  JSON.stringify  into a JavaScript string to be passed to  eval  or  new Function  or as part of a  JSONP  URL, and the following utility can be used: Note : Properties of non-array objects are not guaranteed to be stringified in any particular order. Do not rely on ordering of properties within the same object within the stringification. In a case where you want to store an object created by your user and allowing it to be restored even after the browser has been closed, the following example is a model for the applicability of  JSON.stringify() : Engines implementing the  well-formed JSON.stringify specification  will stringify lone surrogates -- any code point from U+D800 to U+DFFF -- using Unicode escape sequences rather than literally. Before this change  JSON.stringify  would output lone surrogates if the input contained any lone surrogates; such strings could not be encoded in valid UTF-8 or UTF-16: But with this change  JSON.stringify  represents lone surrogates using JSON escape sequences that  can  be encoded in valid UTF-8 or UTF-16: This change should be backwards-compatible as long as you pass the result of  JSON.stringify  to APIs such as  JSON.parse  that will accept any valid JSON text, because they will treat Unicode escapes of lone surrogates as identical to the lone surrogates themselves.  Only  if you are directly interpreting the result of  JSON.stringify  do you need to carefully handle  JSON.stringify 's two possible encodings of these code points. Our team will review your report. Once we verify the information you have supplied we will update this browser compatability table accordingly. You can join the GitHub repository to see updates and commits for this table data: https://github.com/mdn/browser-compat-data  Our goal is to provide accurate, real values for all our compatibility data tables. Notifying MDN of inaccurate data or supplying new data pushes us further towards our goal of providing 100% real values to the developer community. Thank you for helping. Get the latest and greatest from MDN delivered straight to your inbox. The newsletter is offered in English only at the moment. © 2005- 2019  Mozilla and individual contributors. Content is available under these licenses . The  JSON.stringify()  method converts a JavaScript object or value to a JSON string, optionally replacing values if a replacer function is specified or optionally including only the specified properties if a replacer array is specified. The source for this interactive example is stored in a GitHub repository. If you'd like to contribute to the interactive examples project, please clone  https://github.com/mdn/interactive-examples  and send us a pull request. If this is a  Number , it indicates the number of space characters to use as white space; this number is capped at 10 (if it is greater, the value is just  10 ). Values less than 1 indicate that no space should be used. If this is a  String , the string (or the first 10 characters of the string, if it's longer than that) is used as white space. If this parameter is not provided (or is  null ), no white space is used. A JSON string representing the given value. JSON.stringify()  converts a value to JSON notation representing it: The  replacer  parameter can be either a function or an array. As a function , it takes two parameters: the  key  and the  value  being stringified. The object in which the key was found is provided as the replacer's  this  parameter. Initially, the  replacer  function is called with an empty string as key representing the object being stringified. It is then called for each property on the object or array being stringified. It should return the value that should be added to the JSON\u00A0string, as follows: Note:  You cannot use the  replacer  function to remove values from an array. If you return  undefined  or a function then  null  is used instead. Note:  If you wish the replacer to distinguish an initial object from a key with an empty string property (since both would give the empty string as key and potentially an object as value), you will have to keep track of the iteration count (if it is beyond the first iteration, it is a genuine empty string key). If  replacer  is an array, the array's values indicate the names of the properties in the object that should be included in the resulting JSON\u00A0string. The  space  argument may be used to control spacing in the final string. Using a tab character mimics standard pretty-print appearance: If an object being stringified has a property named  toJSON  whose value is a function, then the  toJSON()  method customizes JSON stringification behavior: instead of the object being serialized, the value returned by the  toJSON()  method when called will be serialized.  JSON.stringify()  calls  toJSON  with one parameter: For example: Note that since the  JSON format  doesn't support object references (although an  IETF draft exists ), a  TypeError  will be thrown if one attempts to encode an object with circular references. To serialize circular references you can use a library that supports them (e.g.  cycle.js  by Douglas Crockford) or implement a solution by yourself, which will require finding and replacing (or removing) the cyclic references by serializable values. Historically, JSON was  not a completely strict subset of JavaScript . The literal code points U+2028 LINE SEPARATOR and U+2029 PARAGRAPH SEPARATOR could appear literally in string literals and property names in JSON text. But they could not appear literally in similar context in JavaScript text -- only using Unicode escapes as  \\\\u2028  and  \\\\u2029 .\u00A0 This recently changed: now both code points may appear literally in strings in JSON and JavaScript both. Therefore, if compatibility with older JavaScript engines is required, it is perilous to directly substitute the string returned by  JSON.stringify  into a JavaScript string to be passed to  eval  or  new Function  or as part of a  JSONP  URL, and the following utility can be used: Note : Properties of non-array objects are not guaranteed to be stringified in any particular order. Do not rely on ordering of properties within the same object within the stringification. In a case where you want to store an object created by your user and allowing it to be restored even after the browser has been closed, the following example is a model for the applicability of  JSON.stringify() : Engines implementing the  well-formed JSON.stringify specification  will stringify lone surrogates -- any code point from U+D800 to U+DFFF -- using Unicode escape sequences rather than literally. Before this change  JSON.stringify  would output lone surrogates if the input contained any lone surrogates; such strings could not be encoded in valid UTF-8 or UTF-16: But with this change  JSON.stringify  represents lone surrogates using JSON escape sequences that  can  be encoded in valid UTF-8 or UTF-16: This change should be backwards-compatible as long as you pass the result of  JSON.stringify  to APIs such as  JSON.parse  that will accept any valid JSON text, because they will treat Unicode escapes of lone surrogates as identical to the lone surrogates themselves.  Only  if you are directly interpreting the result of  JSON.stringify  do you need to carefully handle  JSON.stringify 's two possible encodings of these code points. The  JSON.stringify()  method converts a JavaScript object or value to a JSON string, optionally replacing values if a replacer function is specified or optionally including only the specified properties if a replacer array is specified. The source for this interactive example is stored in a GitHub repository. If you'd like to contribute to the interactive examples project, please clone  https://github.com/mdn/interactive-examples  and send us a pull request. If this is a  Number , it indicates the number of space characters to use as white space; this number is capped at 10 (if it is greater, the value is just  10 ). Values less than 1 indicate that no space should be used. If this is a  String , the string (or the first 10 characters of the string, if it's longer than that) is used as white space. If this parameter is not provided (or is {{JSxRef(\\\"null\\\")}}), no white space is used. A JSON string representing the given value. JSON.stringify()  converts a value to JSON notation representing it: The  replacer  parameter can be either a function or an array. As a function , it takes two parameters: the  key  and the  value  being stringified. The object in which the key was found is provided as the replacer's  this  parameter. Initially, the  replacer  function is called with an empty string as key representing the object being stringified. It is then called for each property on the object or array being stringified. It should return the value that should be added to the JSON\u00A0string, as follows: Note:  You cannot use the  replacer  function to remove values from an array. If you return  undefined  or a function then  null  is used instead. Note:  If you wish the replacer to distinguish an initial object from a key with an empty string property (since both would give the empty string as key and potentially an object as value), you will have to keep track of the iteration count (if it is beyond the first iteration, it is a genuine empty string key). If  replacer  is an array, the array's values indicate the names of the properties in the object that should be included in the resulting JSON\u00A0string. The  space  argument may be used to control spacing in the final string. Using a tab character mimics standard pretty-print appearance: If an object being stringified has a property named  toJSON  whose value is a function, then the  toJSON()  method customizes JSON stringification behavior: instead of the object being serialized, the value returned by the  toJSON()  method when called will be serialized.  JSON.stringify()  calls  toJSON  with one parameter: For example: Note that since the  JSON format  doesn't support object references (although an  IETF draft exists ), a {{JSxRef(\\\"TypeError\\\")}} will be thrown if one attempts to encode an object with circular references. To serialize circular references you can use a library that supports them (e.g.  cycle.js  by Douglas Crockford) or implement a solution by yourself, which will require finding and replacing (or removing) the cyclic references by serializable values. Historically, JSON was  not a completely strict subset of JavaScript . The literal code points U+2028 LINE SEPARATOR and U+2029 PARAGRAPH SEPARATOR could appear literally in string literals and property names in JSON text. But they could not appear literally in similar context in JavaScript text -- only using Unicode escapes as  \\\\u2028  and  \\\\u2029 .\u00A0 This recently changed: now both code points may appear literally in strings in JSON and JavaScript both. Therefore, if compatibility with older JavaScript engines is required, it is perilous to directly substitute the string returned by  JSON.stringify  into a JavaScript string to be passed to  eval  or  new Function  or as part of a  JSONP  URL, and the following utility can be used: Note : Properties of non-array objects are not guaranteed to be stringified in any particular order. Do not rely on ordering of properties within the same object within the stringification. In a case where you want to store an object created by your user and allowing it to be restored even after the browser has been closed, the following example is a model for the applicability of  JSON.stringify() : Engines implementing the  well-formed JSON.stringify specification  will stringify lone surrogates -- any code point from U+D800 to U+DFFF -- using Unicode escape sequences rather than literally. Before this change  JSON.stringify  would output lone surrogates if the input contained any lone surrogates; such strings could not be encoded in valid UTF-8 or UTF-16: But with this change  JSON.stringify  represents lone surrogates using JSON escape sequences that  can  be encoded in valid UTF-8 or UTF-16: This change should be backwards-compatible as long as you pass the result of  JSON.stringify  to APIs such as  JSON.parse  that will accept any valid JSON text, because they will treat Unicode escapes of lone surrogates as identical to the lone surrogates themselves.  Only  if you are directly interpreting the result of  JSON.stringify  do you need to carefully handle  JSON.stringify 's two possible encodings of these code points. {{Compat(\\\"javascript.builtins.JSON.stringify\\\")}} 