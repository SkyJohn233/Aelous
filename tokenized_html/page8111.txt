testing a command-line tool with plain ruby jorge manrubia recently i published qc a tool for interacting with quantconnect using the command-line it lets you develop your algos in your local box without having to open quantconnect web editor to run them i wanted to write some system tests that invoked the command line tool and checked the results as long as i can keep them fast i love system tests that test the real thing from top to bottom it uses the quantconnect api under the hood it is http-based so i could use vcr and not having to mock the api connection for testing purposes i love vcr so this was an easy choice for testing commands execution i first tried to use aruba i had learned about it in this book and i knew rspec used it for its tests unfortunately i found a blocking issue for vcr or any mocking approach to work i needed to use the in_process approach but this mode wouldn t work with running commands interactively i needed to exercise how the user interacted with the tool for a couple of cases so this invalidated aruba for me looking for an alternative i ended up just using plain ruby and writing a few simple helpers for my needs the resulting helper was very simple and allowed me to write pretty expressive tests like this for dealing with files i liked aruba s approach of creating a fixtures directory with files you can use to prepare your tests ruby support for scripting with files is wonderful so it was easy to prepare another helper that allowed me to write tests like this i remember that in my early days with ruby and rails i was willing to use whatever gem that more or less matched my needs these days i fight a lot before adding new libraries this was a good reminder to check how vanilla works for you before adding third-party solutions