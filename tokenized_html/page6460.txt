should i use base64 of hmac digest or just hmac hex digest stack overflow by using our site you acknowledge that you have read and understand our cookie policy privacy policy and our terms of service legend i expose an api which requires client to sign requests by sending two headers to create a signature part the client should use a secret key issued by my api service in python py3k it could look like i wondered if i could avoid dealing with encoding digest of bytes to base64 and just use hmac.hexdigest to retrieve a string.so that my function will change to but then i found that amazon uses similar approach as in my first code snippet seeing that amazon does n't use hex digest i stopped myself to move forward with it because maybe they know something i do n't update i 've measured a performance and found hex digest to be faster results with question 1 does someone know why do they stick to base64 of bytes digest and do n't use just hex digest is there some solid reason to keep using this approach over hex digest question 2 according to rfc2716 the format of authorization header value when using basic authenticationis so basically you wrap with base64 two values user 's id and password seprated by colon as you can see in my code snippet and in amazon 's documentation nor me nor amazon do that for own custom value of the authorization header.would it be a better style to wrap the whole pair as base64 access_key signature to stick closer to this rfc or it does n't matter at all amazon does use the hex digest in signature version 4 authorization aws4-hmac-sha256 credential=akidexample/20150830/us-east-1/iam/aws4_request signedheaders=content-type host x-amz-date signature=5d672d79c15b13162d9279b0855cfba6789a8edb4c82c400e06b5924a6f2b5d7 http //docs.aws.amazon.com/general/latest/gr/sigv4-add-signature-to-request.html your example is from signature version 2 the older algorithm which does use base-64 encoding for the signature and which also is not supported in the newest aws regions so your concern that aws knows something you do n't is misplaced since their newer algorithm uses it in the authorization header it really does n't make a difference other than a few extra octets where base-64 gets messy is when the signature is passed in the query string because and depending on who you ask and require special handling they need to be url-escaped percent-encoded as 2b 2f and 3d respectively or you have to make accommodations for the possible variations on the server or you have to require the use of a non-standard base-64 alphabet where becomes the way cloudfront does it this particular non-standard alphabet is only one of multiple non-standard options all solving the same problem of magic characters in urls with base-64 go with hex-encoding you will almost inevitably find would-be consumers of your api that find base-64 to be difficult click here to upload your image max 2 mib cancel and add another image you can also provide a link from the web log in by clicking post your answer you agree to our terms of service privacy policy and cookie policy 2019 stack exchange inc