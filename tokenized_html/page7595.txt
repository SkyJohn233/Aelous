medical device software samd risk management requirements software itself is not risky nobody gets directly injured by bad code or a poorly designed ui and unlike hardware software does not fail randomly that being said software can definitely expose someone to a hazardous situation because software is viewed to have 100 probability of failure when it does occur therefore this makes software rightfully subject to risk management oversight including special considerations for software-controlled medical devices in this post we ll cover the basics of risk management for embedded software or stand-alone software as a medical device samd so you have an understanding of what is required before during and after coding in our second post we ll examine specific requirements and documents unique to the us fda and europe we assume you have a basic understanding of risk management and iso 14971 but if you need a refresher read our excellent white paper on risk management first many guidance documents and market-specific regulatory documents exist to guide developers and compliance professionals however at the root of risk management compliance lie two core documents if your company has not already done so purchase these documents dealing with risk management and software iec/tr 80002-1:2009 is a 58-page guidance document that goes into detail on how to apply iso 14971 to medical device software so you should definitely get a copy of this if your software will connect to any sort of network get a copy of iec/tr 80001-1:2010 because it focuses on risk management for medical devices that are incorporated into it networks it is important to note that both of these standards do not add to or change the application of iso 14971 or iec 62304 rather they are intended to clarify understanding of their application the international medical device regulators forum imdrf also has several documents related to software as a medical device samd that are free and worth reading you can get them here there are many other standards and regional guidance documents that reference risk management and we will talk about them in our next article iec 62304:2015 is a harmonized standard specifically created for medical device software and is accepted by the us fda and european regulators although many of the elements are foundational to any robust software development process iec 62304 provides a framework for processes activities and documentation associated with designing and maintaining medical device software it applies to all samd and embedded software used in medical devices as we mentioned earlier iec 62304 assumes that you are applying iso 14971 risk management and have a quality management system in place that complies with iso 13485 or the us fda quality system regulation 21 cfr part 820 it further assumes that software risk management is part of a broader system that defines higher-level activities for design inputs and design product validation how do they mesh with one another you can think of iso 14971 as the overarching risk management process that covers all product development activities while iec 62304 is a subset of that effort focusing on software risk management configuration management and problem resolution it is also a companion to iec 60601-1 edition 3.1 clause 14 which deals with programmable electrical medical systems pems or those devices that have software associated with them the application of iec 62304 starts with a base assessment of risk the risk classes in the standard are straightforward but placing your software into one of the three classes shown below should not be taken lightly as it has a big impact on the code development and maintenance process remember the risk classes below are independent of the overall risk classification of your device according to us fda or eu regulations here are the three iec 63204 categories defined in simple terms class a – no injury or damage to health possible class b – nonserious injury is possible class c – death or serious injury is possible you are required to address all activities within iec 62304 but tailor the rigor and amount of documentation proportional to the risk associated with your software if your software falls into class a or b some aspects of iec 62304 will not apply as shown in the following table you have to take a worst-case approach in assessing your risk level as this is the approach regulators will take for classifying your software it would be difficult to generate additional documentation for software if your classification is not accepted by a regulatory reviewer unless you are developing class i regulatory classification and class a risk classification software your risk justification and documentation will ultimately be reviewed by the us fda or a european notified body if you have determined your device to be class a according to iec 62304 and your notified body sees it as class b you ll have to justify why you did not document architecture design and integration testing if your software falls somewhere between classes take the conservative approach but don t be overly conservative because there are meaningful documentation differences between class a and b or class b and c. going from class a to b may not affect the risk of your software so think carefully about your classification and document the logic behind your decision people sometimes wonder how failure modes and effects analysis fmea differs from risk management and iso 14971 the simple answer is this fmea focuses on how failures of subcomponents in a system affect the system as a whole whereas iso 14971 also considers factors beyond the product itself fmea is a more of a reliability tool intended for hardware and addresses identifying failure mode probability the problem is that software does not fail randomly so using probability is not an appropriate measure of risk instead of calculating probability the idea is to identify functionality that could result in hazardous situations and try to pinpoint the severity of those hazards you must also define risk control measures for each potential cause contributing to a hazardous situation in this way you will identify risk acceptance criteria for software-caused or software-controlled risks if they differ from other components of the medical device as you go through this process you will want to pay special attention to intentional and unintentional misuse of a device that includes software if the device is more complex the user may rely on the software too much not understanding its full limitations or what performance is restricted by the software operation also the device may communicate with other devices and systems and the effects of environment or interoperability e.g. in a real hospital or field setting may not be well understood in our next post we look at the specific samd requirements of the us fda and europe if you want to learn more about this topic check out our risk management training course and our popular training on software validation and verification 1095 morris avenue suite 103b union nj 07083 phone 1.800.472.6477 fax 732.548.4085 consulting auditing find a training course